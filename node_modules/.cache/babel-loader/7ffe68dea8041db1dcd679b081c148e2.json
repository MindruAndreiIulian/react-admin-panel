{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mindru Andrei\\\\Desktop\\\\react\\\\react-admin-panel\\\\src\\\\App.js\";\nimport React from 'react';\nimport UserList from './components/UserList';\nimport UserAddForm from './components/UserAddForm';\nimport './App.css';\nimport PostList from './components/PostList';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      background: 'white',\n      font: 'black',\n      users: [],\n      posts: [],\n      toggleUsers: true,\n      togglePosts: true\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => {\n      data = data.filter(user => user.id < 3);\n      data.forEach(user => {\n        user.isGoldClient = false;\n      });\n      this.setState({\n        users: data\n      });\n    });\n    fetch('https://jsonplaceholder.typicode.com/posts').then(response => response.json()).then(data => {\n      data = data.filter(post => post.id < 4);\n      this.setState({\n        posts: data\n      });\n    });\n  }\n\n  changeColor(event) {\n    this.setState({\n      background: event.target.value\n    });\n  }\n\n  changeTextColor(event) {\n    this.setState({\n      color: event.target.value\n    });\n  }\n\n  getMaxId(users) {\n    let maxId = 0;\n    users.forEach(user => {\n      if (user.id > maxId) {\n        maxId = user.id;\n      }\n    });\n    return maxId;\n  }\n\n  handleToggleUsers() {\n    this.setState({\n      toggleUsers: false\n    });\n  }\n\n  submitAddForm(event, name, email, salary, image, isGoldClient) {\n    event.preventDefault();\n    this.setState(prevState => {\n      return {\n        users: [...prevState.users, {\n          id: this.getMaxId(prevState.users) + 1,\n          name,\n          email,\n          image,\n          salary,\n          isGoldClient\n        }]\n      };\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      style: {\n        background: this.state.background,\n        color: this.state.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Admin panel - Proiectul 1\"), React.createElement(UserAddForm, {\n      submitAddForm: (event, name, salary, email, image, isGoldClient) => this.submitAddForm(event, name, salary, email, image, isGoldClient),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(UserList, {\n      users: this.state.users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.handleToggleUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Afiseaze/Ascunde userii\"), console.log(this.state), React.createElement(PostList, {\n      posts: this.state.posts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Schimba culoarea fundalului:\"), React.createElement(\"input\", {\n      type: \"color\",\n      onChange: event => this.changeColor(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Schimba culoarea fontului:\"), React.createElement(\"input\", {\n      type: \"color\",\n      onChange: event => this.changeTextColor(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Mindru Andrei\\Desktop\\react\\react-admin-panel\\src\\App.js"],"names":["React","UserList","UserAddForm","PostList","App","Component","constructor","state","background","font","users","posts","toggleUsers","togglePosts","componentDidMount","fetch","then","response","json","data","filter","user","id","forEach","isGoldClient","setState","post","changeColor","event","target","value","changeTextColor","color","getMaxId","maxId","handleToggleUsers","submitAddForm","name","email","salary","image","preventDefault","prevState","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,OADD;AAEXC,MAAAA,IAAI,EAAC,OAFM;AAGXC,MAAAA,KAAK,EAAE,EAHI;AAIXC,MAAAA,KAAK,EAAC,EAJK;AAKXC,MAAAA,WAAW,EAAC,IALD;AAMXC,MAAAA,WAAW,EAAC;AAND,KAAb;AAQD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZA,MAAAA,IAAI,GAAGA,IAAI,CAACC,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAL,GAAU,CAA9B,CAAP;AACAH,MAAAA,IAAI,CAACI,OAAL,CAAaF,IAAI,IAAI;AACnBA,QAAAA,IAAI,CAACG,YAAL,GAAoB,KAApB;AACD,OAFD;AAGA,WAAKC,QAAL,CAAc;AAACf,QAAAA,KAAK,EAAES;AAAR,OAAd;AACD,KARH;AAWEJ,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZA,MAAAA,IAAI,GAAEA,IAAI,CAACC,MAAL,CAAYM,IAAI,IAAIA,IAAI,CAACJ,EAAL,GAAU,CAA9B,CAAN;AAGA,WAAKG,QAAL,CAAc;AAACd,QAAAA,KAAK,EAACQ;AAAP,OAAd;AAED,KARD;AAYH;;AAEDQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKH,QAAL,CAAc;AAACjB,MAAAA,UAAU,EAAEoB,KAAK,CAACC,MAAN,CAAaC;AAA1B,KAAd;AACD;;AAEDC,EAAAA,eAAe,CAACH,KAAD,EAAO;AACpB,SAAKH,QAAL,CAAc;AAACO,MAAAA,KAAK,EAACJ,KAAK,CAACC,MAAN,CAAaC;AAApB,KAAd;AACD;;AAEDG,EAAAA,QAAQ,CAACvB,KAAD,EAAQ;AACd,QAAIwB,KAAK,GAAG,CAAZ;AAEAxB,IAAAA,KAAK,CAACa,OAAN,CAAcF,IAAI,IAAI;AACpB,UAAIA,IAAI,CAACC,EAAL,GAAUY,KAAd,EAAqB;AACnBA,QAAAA,KAAK,GAAGb,IAAI,CAACC,EAAb;AACD;AACF,KAJD;AAMA,WAAOY,KAAP;AACD;;AAEDC,EAAAA,iBAAiB,GAAE;AAEjB,SAAKV,QAAL,CAAc;AAACb,MAAAA,WAAW,EAAC;AAAb,KAAd;AACD;;AAEDwB,EAAAA,aAAa,CAACR,KAAD,EAAQS,IAAR,EAAcC,KAAd,EAAoBC,MAApB,EAA2BC,KAA3B,EAAkChB,YAAlC,EAAgD;AAC3DI,IAAAA,KAAK,CAACa,cAAN;AACA,SAAKhB,QAAL,CAAciB,SAAS,IAAI;AACzB,aAAO;AACLhC,QAAAA,KAAK,EAAE,CACL,GAAGgC,SAAS,CAAChC,KADR,EAEL;AACEY,UAAAA,EAAE,EAAE,KAAKW,QAAL,CAAcS,SAAS,CAAChC,KAAxB,IAAiC,CADvC;AAEE2B,UAAAA,IAFF;AAGEC,UAAAA,KAHF;AAIEE,UAAAA,KAJF;AAKED,UAAAA,MALF;AAMEf,UAAAA;AANF,SAFK;AADF,OAAP;AAaD,KAdD;AAeD;;AAEDmB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAE;AAACnC,QAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC,UAAxB;AAAmCwB,QAAAA,KAAK,EAAC,KAAKzB,KAAL,CAAWyB;AAApD,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE,oBAAC,WAAD;AAAa,MAAA,aAAa,EAAE,CAACJ,KAAD,EAAQS,IAAR,EAAaE,MAAb,EAAqBD,KAArB,EAA2BE,KAA3B,EAAkChB,YAAlC,KAAmD,KAAKY,aAAL,CAAmBR,KAAnB,EAA0BS,IAA1B,EAA+BE,MAA/B,EAAuCD,KAAvC,EAA6CE,KAA7C,EAAoDhB,YAApD,CAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWG,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAQ,MAAA,OAAO,EAAG,MAAM,KAAKyB,iBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAJF,EAKGS,OAAO,CAACC,GAAR,CAAY,KAAKtC,KAAjB,CALH,EAME,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKA,KAAL,CAAWI,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCATF,EAUE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,QAAQ,EAAGiB,KAAD,IAAW,KAAKD,WAAL,CAAiBC,KAAjB,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAXF,EAYE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,QAAQ,EAAGA,KAAD,IAAW,KAAKG,eAAL,CAAqBH,KAArB,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF;AAiBD;;AArG+B;;AAwGlC,eAAexB,GAAf","sourcesContent":["import React from 'react';\r\nimport UserList from './components/UserList';\r\nimport UserAddForm from './components/UserAddForm';\r\nimport './App.css';\r\nimport PostList from './components/PostList';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      background: 'white',\r\n      font:'black',\r\n      users: [],\r\n      posts:[],\r\n      toggleUsers:true,\r\n      togglePosts:true\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        data = data.filter(user => user.id < 3);\r\n        data.forEach(user => {\r\n          user.isGoldClient = false;\r\n        });\r\n        this.setState({users: data});\r\n      })\r\n\r\n\r\n      fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        data= data.filter(post => post.id < 4);\r\n        \r\n        \r\n        this.setState({posts:data});\r\n        \r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n  changeColor(event) {\r\n    this.setState({background: event.target.value});\r\n  }\r\n\r\n  changeTextColor(event){\r\n    this.setState({color:event.target.value});\r\n  }\r\n\r\n  getMaxId(users) {\r\n    let maxId = 0;\r\n\r\n    users.forEach(user => {\r\n      if (user.id > maxId) {\r\n        maxId = user.id;\r\n      }\r\n    });\r\n\r\n    return maxId;\r\n  }\r\n\r\n  handleToggleUsers(){\r\n\r\n    this.setState({toggleUsers:false});\r\n  }\r\n\r\n  submitAddForm(event, name, email,salary,image, isGoldClient) {\r\n    event.preventDefault();\r\n    this.setState(prevState => {\r\n      return {\r\n        users: [\r\n          ...prevState.users,\r\n          {\r\n            id: this.getMaxId(prevState.users) + 1,\r\n            name,\r\n            email,\r\n            image,\r\n            salary,\r\n            isGoldClient\r\n          }\r\n        ]\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"app\" style={{background: this.state.background,color:this.state.color}}>\r\n        <h1>Admin panel - Proiectul 1</h1>\r\n        <UserAddForm submitAddForm={(event, name,salary, email,image, isGoldClient) => this.submitAddForm(event, name,salary, email,image, isGoldClient)}/>\r\n        <UserList users={this.state.users}/>\r\n        <button onClick={ () => this.handleToggleUsers} >Afiseaze/Ascunde userii</button>\r\n        {console.log(this.state)}\r\n        <PostList posts={this.state.posts}/>\r\n        \r\n\r\n        <p>Schimba culoarea fundalului:</p>\r\n        <input type=\"color\" onChange={(event) => this.changeColor(event)}/>\r\n        <p>Schimba culoarea fontului:</p>\r\n        <input type=\"color\" onChange={(event) => this.changeTextColor(event)}/>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}